----------Setup Instructions------------

java version - 11 
Spring boot version - 3.0.0

Run Application.java to run project on your local eclipse/intellij.Also Update Db Credentials in application.properties.

Database configuration has been added in application.properties
Create db schema and named it artistvotepoc
DB URL - jdbc:mysql://localhost:3306/artistvotepoc
update spring.datasource.username & spring.datasource.password in application.properties

Database tables and initial entries will be created by code after running the application.
* Before running the application make sure db schema should be present and it should not have any tables.
drop using cmd - drop table artist;

Requirements - 

 API calls (with documentation for each)
Swagger url - http://localhost:8080/swagger-ui/index.html

that
o Get an overview/data summary. All artists, with vote count for each.
Rest URL - http://localhost:8080/api/show_all

o Get a data summary for a specific artist, with vote count for that artist only.
Rest URL  - http://localhost:8080/api/get_artist/led_Zeppelin

o Add a vote row (using HTTP POST) to the vote table, for a specific artist.
Rest URL - http://localhost:8080/api/add_vote
Input is Artist Label

o All responses are in JSON, with a success message and the date Time of the operation.
 Unit tests in Java are required.
 All API calls (except the overview) use an artist label value as an input parameter. The convention is
no spaces, all lowercase, and words separated by underscores.

Acceptance Criteria:
 Your project name is artist-vote in all lower-case.
 The database is built from the SQL commands on the Source Material page.
 Votes are added, (not removed) from an artist. When an artist gets a vote, a row is added to the vote
table. We are keeping this challenge at a basic scope.
 Your project builds and runs in a local environment of your reviewer.



